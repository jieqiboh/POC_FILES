// Code generated by Kitex v0.5.2. DO NOT EDIT.

package bizservice

import (
	"context"
	biz "genhttpserv/kitex_gen/biz"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return bizServiceServiceInfo
}

var bizServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BizService"
	handlerType := (*biz.BizService)(nil)
	methods := map[string]kitex.MethodInfo{
		"BizMethod1": kitex.NewMethodInfo(bizMethod1Handler, newBizServiceBizMethod1Args, newBizServiceBizMethod1Result, false),
		"BizMethod2": kitex.NewMethodInfo(bizMethod2Handler, newBizServiceBizMethod2Args, newBizServiceBizMethod2Result, false),
		"BizMethod3": kitex.NewMethodInfo(bizMethod3Handler, newBizServiceBizMethod3Args, newBizServiceBizMethod3Result, false),
	}
	extra := map[string]interface{}{
		"PackageName": "biz",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func bizMethod1Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceBizMethod1Args)
	realResult := result.(*biz.BizServiceBizMethod1Result)
	success, err := handler.(biz.BizService).BizMethod1(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceBizMethod1Args() interface{} {
	return biz.NewBizServiceBizMethod1Args()
}

func newBizServiceBizMethod1Result() interface{} {
	return biz.NewBizServiceBizMethod1Result()
}

func bizMethod2Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceBizMethod2Args)
	realResult := result.(*biz.BizServiceBizMethod2Result)
	success, err := handler.(biz.BizService).BizMethod2(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceBizMethod2Args() interface{} {
	return biz.NewBizServiceBizMethod2Args()
}

func newBizServiceBizMethod2Result() interface{} {
	return biz.NewBizServiceBizMethod2Result()
}

func bizMethod3Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceBizMethod3Args)
	realResult := result.(*biz.BizServiceBizMethod3Result)
	success, err := handler.(biz.BizService).BizMethod3(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceBizMethod3Args() interface{} {
	return biz.NewBizServiceBizMethod3Args()
}

func newBizServiceBizMethod3Result() interface{} {
	return biz.NewBizServiceBizMethod3Result()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BizMethod1(ctx context.Context, req *biz.BizRequest) (r *biz.BizResponse, err error) {
	var _args biz.BizServiceBizMethod1Args
	_args.Req = req
	var _result biz.BizServiceBizMethod1Result
	if err = p.c.Call(ctx, "BizMethod1", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BizMethod2(ctx context.Context, req *biz.BizRequest) (r *biz.BizResponse, err error) {
	var _args biz.BizServiceBizMethod2Args
	_args.Req = req
	var _result biz.BizServiceBizMethod2Result
	if err = p.c.Call(ctx, "BizMethod2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BizMethod3(ctx context.Context, req *biz.BizRequest) (r *biz.BizResponse, err error) {
	var _args biz.BizServiceBizMethod3Args
	_args.Req = req
	var _result biz.BizServiceBizMethod3Result
	if err = p.c.Call(ctx, "BizMethod3", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
